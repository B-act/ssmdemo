<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- Spring希望管理所有的业务逻辑组件，等。。。 -->
	<context:component-scan base-package="com.glemontree.mybatis">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入数据库的配置文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	
	<!-- Spring用来控制业务逻辑。数据源、事务控制、aop -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- spring事务管理 -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 开启基于注解的事务 -->
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>
	
	<!-- 
		整合mybatis
			目的：1、spring管理所有组件。mapper的实现类。
					service==>Dao   @Autowired:自动注入mapper；
				2、spring用来管理事务，spring声明式事务
	-->
	<!--创建出SqlSessionFactory对象  -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- configLocation指定全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!--mapperLocations: 指定mapper文件的位置-->
		<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
	</bean>
	
	<!--配置一个可以进行批量执行的sqlSession  -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!--
		扫描所有的mapper接口的实现，让这些mapper能够自动注入；
		base-package：指定mapper接口的包名
	 -->
	<mybatis-spring:scan base-package="com.glemontree.mybatis.dao"/>
	
	<!--另一种实现方式-->
	<!--
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.atguigu.mybatis.dao"></property>
		</bean>
	-->
	
	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
		<tx:attributes>
			<!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
			<tx:method name="select*" read-only="true"/>
			<tx:method name="count*" read-only="true"/>
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 事务 aop 配置 -->
	<aop:config>
		<aop:pointcut id="serviceMethods" expression="execution(* com.glemontree.mybatis.service..*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
	</aop:config>
	
	<!-- 配置使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!--Cache配置-->
	<bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
	      p:configLocation="classpath:ehcache.xml"/>
	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
	      p:cacheManager-ref="ehCacheManagerFactory"/>
	
	<!--启用缓存注解-->
	<cache:annotation-driven cache-manager="cacheManager"/>

</beans>
